local debug = false;
local INFO = 0;
local ERROR = 1;
local cs_pin = null;

//cs_pin = hardware.pin7;

 
/////////////////////
//////////////////////////////////////////////////////////////////
// CC1101 WRITE MASKS
const WRITE_BURST                 = 0x40;
const READ_SINGLE                 = 0x80;
const READ_BURST                  = 0xC0;
 
const CONFIG_REG                  = 0x80;
const STATUS_REG                  = 0xC0;
///////////////////////////////////////////////////////////////////////////////////////

//CC1101 Strobe commands
const _SRES                       = 0x30; // Reset chip.
const _SFSTXON                    = 0x31; // Enable and calibrate frequency synthesizer (if MCSM0.FS_AUTOCAL=1).
                                          // If in RX/TX: Go to a wait state where only the synthesizer is
                                          // running (for quick RX / TX turnaround).
const _SXOFF                      = 0x32; // Turn off crystal oscillator.
const _SCAL                       = 0x33; // Calibrate frequency synthesizer and turn it off
                                          // (enables quick start).
const _SRX                        = 0x34; // Enable RX. Perform calibration first if coming from IDLE and
                                          // MCSM0.FS_AUTOCAL=1.
const _STX                        = 0x35; // In IDLE state: Enable TX. Perform calibration first if
                                          // MCSM0.FS_AUTOCAL=1. If in RX state and CCA is enabled:
                                          // Only go to TX if channel is clear.
const _SIDLE                      = 0x36; // Exit RX / TX, turn off frequency synthesizer and exit
                                                // Wake-On-Radio mode if applicable.
const _SAFC                       = 0x37; // Perform AFC adjustment of the frequency synthesizer
const _SWOR                       = 0x38; // Start automatic RX polling sequence (Wakeon-Radio)
const _SPWD                       = 0x39; // Enter power down mode when CSn goes high.
const _SFRX                       = 0x3A; // Flush the RX FIFO buffer.
const _SFTX                       = 0x3B; // Flush the TX FIFO buffer.
const _SWORRST                    = 0x3C; // Reset real time clock.
const _SNOP                       = 0x3D; // No operation. May be used to pad strobe commands to two
                                          // INT8Us for simpler software.
 
///////////////////////////////////////////////////////////////////////////////////////
//CC1101 Status Registers
const _PARTNUM                    = 0x30;
const _VERSION                    = 0x31;
const _FREQEST                    = 0x32;
const _LQI                        = 0x33;
const _RSSI                       = 0x34;
const _MARCSTATE                  = 0x35;
const _WORTIME1                   = 0x36;
const _WORTIME0                   = 0x37;
const _PKTSTATUS                  = 0x38;
const _VCO_VC_DAC                 = 0x39;
const _TXBYTES                    = 0x3A;
const _RXBYTES                    = 0x3B;
const _RCCTRL1_STATUS             = 0x3C;
const _RCCTRL0_STATUS             = 0x3D;
 
///////////////////////////////////////////////////////////////////////////////////////
// Definitions to support burst/single access:
const CRC_OK                      = 0x80;
const RSSI                        = 0;
const LQI                         = 1;
const BYTES_IN_RXFIFO             = 0x7F;
///////////////////////////////////////////////////////////////////////////////////////
// Definitions for chip status
const CHIP_RDY                    = 0x80;
const CHIP_STATE_MASK             = 0x70;
const CHIP_STATE_IDLE             = 0x00;
const CHIP_STATE_RX               = 0x10;
const CHIP_STATE_TX               = 0x20;
const CHIP_STATE_FSTON            = 0x30;
const CHIP_STATE_CALIBRATE        = 0x40;
const CHIP_STATE_SETTLING         = 0x50;
const CHIP_STATE_RXFIFO_OVERFLOW  = 0x60;
const CHIP_STATE_TXFIFO_UNDERFLOW = 0x70;
const FIFO_BYTES_MASK             = 0x0F;
 
//CC1101 PATABLE,TXFIFO,RXFIFO
const _PATABLE                    = 0x3E;
const _TXFIFO                     = 0x3F;
const _RXFIFO                     = 0x3F;
const _SPI_WRITE_MASK             = 0x80;
 
/*
    SPI-189
 * CC1101          imp (April)
 * 1   <-      3.3     ->   3v3
 * 2   <-      SI      ->   8
 * 3   <-      CLK     ->   1
 * 4   <-      SO      ->   9
 * 5   <-      GDO2    ->   2
 * 6   <-      GND     ->   GND
 * 7   <-      GDO0    ->   5
 * 8   <-      CSN     ->   7
 */
// Configure the imp to use SPI, pins 1,8 and 9


class CC110L
{
    spiMode = false;
    cs_pin = null;
//    so_pin = null;
    rc_pin = null;
    spiSetup_flags = null;
    spiSetup_clock = null;

    constructor(spi, clock, chipselect)
    {
        spiSetup_flags = 0;
        spiSetup_clock = clock;
//        so_pin = hardware.pin2;
        cs_pin = chipselect;
       
        // Configure CS pin
        if(cs_pin != null)
        {
            cs_pin.configure(DIGITAL_OUT);
            DeselectChip();
        }
        SelectSPI();
        Reset();
    }


    // Configure the imp to use SPI, pins 1,8 and 9
    function SelectSPI()
    {
    //    hardware.configure(SPI_189);
        cs_pin.configure(DIGITAL_OUT);
        DeselectChip();
        hardware.configure(SPI_189);
        hardware.spi189.configure(0, 1000);
    }


    function SelectChip()   { cs_pin.write(0); }
    function DeselectChip() { cs_pin.write(1); }


    // Reset the chip
    function Reset()
    {
        DeselectChip();             // Deselect CC1101
        imp.sleep(0.000005);        
        SelectChip();               // Select C1101
        imp.sleep(0.000010);    
        DeselectChip();             // Deselect CC1101
        imp.sleep(0.000041);
        SelectChip();               // Select CC1101
//        SelectDigitalRead();        
//        WaitMiso();                 // Wait until MISO goes low
//        SelectSPI();
        hardware.spi189.write("\x36"); // Send Reset command
//        SelectDigitalRead();                
//        WaitMiso();                 // Wait until MISO goes low
        DeselectChip();             // Deselect
    }

    // Configure the imp to use
//    function SelectDigitalRead()
//    {
//        so_pin.configure(DIGITAL_IN);
//        spiMode = false;
//    }
 
//    function WaitMiso()
//    {
//        local i = 0;
//        while(so_pin.read() == 1);
//    }

    function readStatusReg(regAddr) //,regType)
    {
        local addr = regAddr | 0xC0; //regType
        local out = blob(2)
        local result
        out[0] = addr
        out[1] = 0xff
        SelectChip();                                // Select CC1101
//        WaitMiso();                                 // Wait until MISO goes low
        result = hardware.spi189.writeread(out);   // Write the address
    //    hardware.spi189.read(1);                    // Get the value
    //    hardware.spi189.write(format("%c",0xFF));   // Write a dummy byte
    //    local result = hardware.spi189.read(1);     // Get the actual value
        DeselectChip(); // Deselect CC1101
    //    server.log(result.tostring());
    //    server.log(format(" %02x", result[0]));
    //    server.log(format(" %02x", result[1]));
    
        return (result);
        
    }
    function readRxBuffer()
    {
        local addr = _RXBYTES | 0xC0;
        
        SelectChip();                                // Select CC1101
        //WaitMiso();                                 // Wait until MISO goes low
        local out = blob(2)
        out[0] = addr;
        out[1] = 0x00;
        local result = hardware.spi189.writeread(out);   // Write the address
    //    server.log(format("> %02x", result[0]));
    //    server.log(format("> %02x", result[1]));
    //    hardware.spi189.read(1);                    // Get the value
    //    result = hardware.spi189.writeread(format("%c",0xFF));   // Write a dummy byte
    //    local result = hardware.spi189.read(1); 
    //    server.log(result) // Get the actual value
        if(result[1] > 0)
        {
            local x;
            local message = blob(64);
            server.log("got some bytes:")
            local inblob = blob(result[1] + 1)
            inblob[0] = 0xff
            local s = hardware.spi189.writeread(inblob);  // read some data
            if(s.len() > 3)
            {
                message.resize(s[1]);
                if(s[2] == 0) // must be ascii
                {
                    for(x=0;x < s[1] - 3;x++ )
                    {
                        message[x] = s[x + 3];
                        message[x+1] = 0x00;
                    }
                    server.log(format ("%s", message.tostring()))
                    agent.send("test", message);
                }
            }
            foreach(b in s)                          // Write the data
            {
                if((b > 0x20) && (b < 0x7f))
                    server.log(format ("%c", b))
                else
                    server.log(format(" %02x", b));
            }
            DeselectChip(); // Deselect CC1101
            return(s)
        }
        DeselectChip(); // Deselect CC1101
    //    server.log(format("SPI rx %02x", result[0]));
    
        return (result);
        
    }


    function Write(regAddr, data)
    {
        SelectDigitalRead();                        // Make SO to digital pin
        SelectChip()                                // Select CC1101
        WaitMiso();                                 // Wait until MISO goes low
        SelectSPI();                                // Go back to SPI mode
        hardware.spi189.write(format("%c",regAddr));// Write the address
        hardware.spi189.write(format("%c",data));   // Write the data
        DeselectChip()                              // Deselect CC1101
    }



    function WriteBurst(regAddr, data)
    {
        
        SelectChip();
    //    hardware.spi189.write(data);
    //  local d = hardware.spi189.writeread(data);
    
    //local addr = regAddr | WRITE_BURST;
    //    SelectChip()                                // Select CC1101
    //    WaitMiso();                                 // Wait until MISO goes low
    //    SelectSPI();                                // Go back to SPI mode
    //    hardware.spi189.write(format("%c",addr));   // Write the address
          
        foreach(b in data)                          // Write the data
        {
            hardware.spi189.write(format("%c",b));
        }
           
    
        DeselectChip()                              // Deselect CC1101
    }
       
    function strobe(strobe_addr)
    {
        SelectChip();
        hardware.spi189.write(format("%c",strobe_addr));
        DeselectChip();
    }

    function cc110L_config()
    {
      local outdata = [
            0x40, // start config download
            0x4E, //  0x0000 -- IOCFG2
            0x4E, //  0x0001 -- IOCFG1
            0x4E, //  0x0002 -- IOCFG0
            0x07, //  0x0003 -- FIFOTHR
            0x54, //  0x0004 -- SYNC1
            0x4C, //  0x0005 -- SYNC0
            61,   //  0x0006 -- PKTLEN
            0x04, //  0x0007 -- PKTCTRL1
            0x05, //  0x0008 -- PKTCTRL0
            0x00, //  0x0009 -- ADDR
            0x00, //  0x000A -- CHANNR
            0x11, //  0x000B -- FSCTRL1
            0x20, //  0x000C -- FSCTRL0
            0x21, //  0x000D -- FREQ2
            0x8F, //0xB1, //  0x000E -- FREQ1
            0x38, //  0x000F -- FREQ0 
            0x3D, //  0x0010 -- MDMCFG4
            0x2F, //  0x0011 -- MDMCFG3 
            0x13, //  0x0012 -- MDMCFG2 
            0x00, //  0x0013 -- MDMCFG1
            0xF8, //  0x0014 -- MDMCFG0
            0x62, //  0x0015 -- DEVIATN
            0x07, //  0x0016 -- MCSM2
            0x30, //  0x0017 -- MCSM1
            0x18, //  0x0018 -- MCSM0
            0x1D, //  0x0019 -- FOCCFG
            0x1C, //  0x001A -- BSCFG 
            0xC7, //  0x001B -- AGCCTRL2
            0x00, //  0x001C -- AGCCTRL1
            0xB0, //  0x001D -- AGCCTRL0
            0x2A, //  0x001E -- WOREVT1
            0x51, //  0x001F -- WOREVT0 
            0x79, //  0x0020 -- WORCTRL
            0xB6, //  0x0021 -- FREND1 
            0x10, //  0x0022 -- FREND0
            0xEA, //  0x0023 -- FSCAL3
            0x2A, //  0x0024 -- FSCAL2 
            0x00, //  0x0025 -- FSCAL1 
            0x1F, //  0x0026 -- FSCAL0
            0x41, //  0x0027 -- RCCTRL1 
            0x00, //  0x0028 -- RCCTRL0 
            0x59, //  0x0029 -- FSTEST
            0x7F, //  0x002A -- PTEST
            0x3F, //  0x002B -- AGCTEST 
            0x88, //  0x002C -- TEST2 
            0x31, //  0x002D -- TEST1 
            0x09, //  0x002E -- TEST0 
            0x00, //  0x0030 -- PARTNUM
            0x04, //  0x0031 -- VERSION
            0x00, //  0x0032 -- FREQEST
            0x00, //  0x0033 -- LQI
            0x00, //  0x0034 -- RSSI
            0x00, //  0x0035 -- MARCSTATE
            0x00, //  0x0036 -- WORTIME1
            0x00, //  0x0037 -- WORTIME0 
            0x00, //  0x0038 -- PKTSTATUS 
            0x00, //  0x0039 -- VCO_VC_DAC
            0x00, //  0x003A -- TXBYTES
            0x00, //  0x003B -- RXBYTES    
            0x00, //  0x003C -- RCCTRL1_STATUS 
            0x00 //  0x003D -- RCCTRL0_STATUS 
            ];
    
        WriteBurst(0x00, outdata);
    }
    
    // Send packet
    function SendPacket(packet, size)
    {
        local i = 0;
        local txBuffer = array(size + 1);
       
        for(i = size; i > 0; i--)
        {
            txBuffer[i] = packet[i - 1];
            Debug("txBuffer[" + i + "] = " + txBuffer[i],INFO);
        }
        txBuffer[0] = size;
        WriteBurst(_TXFIFO,txBuffer, size + 1);
       
        Strobe(_SIDLE);
        Strobe(_STX);
    }


} // end class


// Send a debugging or error message to the server
function Debug(msg, level)
{
    switch(level)
    {
        case ERROR:
        {
            server.log(msg);
        }
        break;
       
        case INFO:
        {
            if(debug)
            {
                server.log(msg);
            }
        }
        break;
    }
}


// Get the version and the part number - verifies communication
function VerifyComm(){return (si.ReadReg(_VERSION, STATUS_REG) == 0x07 && si.ReadReg(_PARTNUM, STATUS_REG) == 0x00);}
 

// Create the class
server.log("create class")
si <- CC110L(SPI_189, 1000, hardware.pin7);
server.log("create class done")
 


local result;
//SelectSPI();

//strobe(_SRES);
//result = readStatusReg(_MARCSTATE);
//server.log(format("status after reset %02x", result[1]));

si.strobe(_SIDLE);
result = si.readStatusReg(_MARCSTATE);
server.log(format("status after idle %02x", result[1]));

result = si.readStatusReg(_VERSION);
server.log(format("Version: %02x", result[1]));
result = si.readStatusReg(_MARCSTATE);
server.log(format("status after idle %02x", result[1]));
si.cc110L_config();
server.log("configuration done")
si.strobe(_SFRX);
imp.sleep(0.00001);
result = si.readStatusReg(_MARCSTATE);
server.log(format("MS after SFRX %02x", result[1]));
si.strobe(_SRX);
imp.sleep(0.001);
result = si.readStatusReg(_MARCSTATE);
server.log(format("MS after RX %02x", result[1]));


si.readStatusReg(_MARCSTATE);
function lookAlarm()
{
    result = si.readRxBuffer();
    if(result[1] > 0)
    {
//        server.log(format(">>>>SPI rx bytes %02x", result[1]));
        si.strobe(_SFRX);
        server.log("sent RXFLUSH strobe")
        imp.sleep(0.00001);
        si.readStatusReg(_MARCSTATE);
        server.log("sent RX strobe")
        si.strobe(_SRX);
        imp.sleep(0.0011);
        result = si.readStatusReg(_MARCSTATE);
        server.log(format("MS after RX %02x", result[1]));
    }
    si.readStatusReg(_MARCSTATE);
    imp.wakeup(0.5, lookAlarm);
}
lookAlarm();


// End of code